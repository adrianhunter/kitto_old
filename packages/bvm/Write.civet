{ BufferWriter } from ./BufferWriter.civet
{ decodeHex } from ./Decode.civet
import type { Tx } from ./Tx.civet

export writeVarint := (writer: BufferWriter, n: number) =>
  if n > Number.MAX_SAFE_INTEGER
    throw new Error "varint too large"
  if n <= 0xfc
    return writer.write([n])
  if n <= 0xffff
    return writer.write([0xfd, n % 256, Math.floor(n / 256)])
  if n <= 0xffffffff 
    buffer := new Uint8Array 5
    buffer[0] = 0xfe
    buffer[1] = n % 256
    n = Math.floor(n / 256)
    buffer[2] = n % 256
    n = Math.floor(n / 256)
    buffer[3] = n % 256
    n = Math.floor(n / 256)
    buffer[4] = n
    return writer.write(buffer)

  // n <= 0xffffffffffffffff
  buffer := new Uint8Array 9
  buffer[0] = 0xff
  buffer[1] = n % 256
  n = Math.floor(n / 256)
  buffer[2] = n % 256
  n = Math.floor(n / 256)
  buffer[3] = n % 256
  n = Math.floor(n / 256)
  buffer[4] = n % 256
  n = Math.floor(n / 256)
  buffer[5] = n % 256
  n = Math.floor(n / 256)
  buffer[6] = n % 256
  n = Math.floor(n / 256)
  buffer[7] = n % 256
  n = Math.floor(n / 256)
  buffer[8] = n
  return writer.write(buffer)

export writeU64LE := (writer: BufferWriter, n: number) => 
  if n > Number.MAX_SAFE_INTEGER
    throw new Error "number too large"
  buffer := new Uint8Array 8
  buffer[0] = n % 256
  n = Math.floor(n / 256)
  buffer[1] = n % 256
  n = Math.floor(n / 256)
  buffer[2] = n % 256
  n = Math.floor(n / 256)
  buffer[3] = n % 256
  n = Math.floor(n / 256)
  buffer[4] = n % 256
  n = Math.floor(n / 256)
  buffer[5] = n % 256
  n = n >> 8
  buffer[6] = n % 256
  n = n >> 8
  buffer[7] = n

  return writer.write(buffer)


export writeU32LE := (writer: BufferWriter, n: number) =>
  if n > 0xffffffff
    throw new Error "number too large"
  buffer := new Uint8Array 4
  buffer[0] = n % 256
  n = Math.floor(n / 256)
  buffer[1] = n % 256
  n = n >> 8
  buffer[2] = n % 256
  n = n >> 8
  buffer[3] = n
  return writer.write(buffer)


export writeTx := (writer: BufferWriter, tx: Tx) =>
  version := typeof tx.version === "undefined" ? 1 : tx.version
  inputs := tx.inputs || []
  outputs := tx.outputs || []
  locktime := typeof tx.locktime === "undefined" ? 0 : tx.locktime

  writeU32LE(writer, version)

  writeVarint(writer, inputs.length)
  for (const input of inputs) {
    const script = input.script
    const sequence = typeof input.sequence === "undefined"
      ? 0xffffffff
      : input.sequence
    writer.write(decodeHex(input.txid).reverse())
    writeU32LE(writer, input.vout)
    writeVarint(writer, script.length)
    writer.write(script)
    writeU32LE(writer, sequence)
  }

  writeVarint(writer, outputs.length)
  for (const output of outputs) {
    writeU64LE(writer, output.satoshis)
    writeVarint(writer, output.script.length)
    writer.write(output.script)
  }

  //@ts-ignore
  writeU32LE(writer, locktime)

  return this


export const writePushData = (writer: BufferWriter, buffer: Buf) => {
  // It is possible to optimize buffers that only store numbers 1-16, or -1, by using the OP_N opcodes.
  // But we say "push data" is always stored using OP_0 or OP_PUSH(N) so that it's easy to identify and
  // extract, and also because there is some ambiguity around OP_0 if we don't do this.
  if (buffer.length === 0) {
    writer.write([0]);
  } else if (buffer.length <= 75) {
    writer.write([buffer.length]); // OP_PUSH(buffer.length)
    writer.write(buffer);
  } else if (buffer.length <= 0xFF) {
    writer.write([76, buffer.length]); // OP_PUSHDATA1
    writer.write(buffer);
  } else if (buffer.length <= 0xFFFF) {
    writer.write([77, buffer.length % 256, buffer.length >> 8]); // OP_PUSHDATA2
    writer.write(buffer);
  } else if (buffer.length <= 0xFFFFFFFF) {
    const prefix = new Uint8Array(5);
    prefix[0] = 78; // OP_PUSHDATA4
    let n = buffer.length;
    prefix[1] = n % 256;
    n = Math.floor(n / 256);
    prefix[2] = n % 256;
    n = Math.floor(n / 256);
    prefix[3] = n % 256;
    n = Math.floor(n / 256);
    prefix[4] = n;
    writer.write(prefix);
    writer.write(buffer);
  } else {
    throw new Error("data too large");
  }
  return writer;
};



export writeDER :=(
  writer: BufferWriter,
  signature: {
    r: Iterable<number> | ArrayLike<number>;
    s: Iterable<number> | ArrayLike<number>;
  },
) ->
    //@ts-ignore
  r := signature.r[0] & 0x80
    ? [0x00].concat(Array.from(signature.r))
    : signature.r
    //@ts-ignore
  s := signature.s[0] & 0x80
    ? [0x00].concat(Array.from(signature.s))
    : signature.s
  //@ts-ignore
  rlength := r.length
  //@ts-ignore
  slength := s.length
  length := 2 + rlength + 2 + slength
  der := new Uint8Array length + 2
  der[0] = 0x30
  der[1] = length
  der[2] = 0x02
  der[3] = rlength
  //@ts-ignore
  der.set r, 4
  der[rlength + 4] = 0x02
  der[rlength + 5] = slength
  //@ts-ignore
  der.set s, rlength + 6
  writer.write der


describe "Write writeVarint", => 
  it 'valid', => 
    testValid := (n: number, enc: Buf) => 
      assert.equal Array.from(writeVarint(new BufferWriter(), n).toBuffer()), enc
    testValid 0, [0]
    testValid 1, [1]
    testValid 252, [252]
    testValid 253, [0xfd, 253, 0]
    testValid 0xff, [0xfd, 255, 0]
    testValid 0xff + 1, [0xfd, 0, 1]
    testValid 0xffff, [0xfd, 0xff, 0xff]
    testValid 0xffff + 1, [0xfe, 0, 0, 1, 0]
    testValid 0xffffff, [0xfe, 0xff, 0xff, 0xff, 0]
    testValid 0xffffff + 1, [0xfe, 0, 0, 0, 1]
    testValid 0xffffffff, [0xfe, 0xff, 0xff, 0xff, 0xff]
    testValid 0xffffffff + 1, [0xff, 0, 0, 0, 0, 1, 0, 0, 0]
    testValid 0x0000ffffffffffff, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00]
    testValid 0x0000f2f3f4f5f6f7, [0xff, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0x00, 0x00]
    testValid Number.MAX_SAFE_INTEGER, [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00]
  it 'throws if too big', => 
    assert.throws () => writeVarint(new BufferWriter(), Number.MAX_SAFE_INTEGER + 1), Error, 'varint too large'
    assert.throws () => writeVarint(new BufferWriter(), Number.MAX_VALUE), Error, 'varint too large'

describe 'Write writeU64LE', => 
  it 'valid', => 
    assert.equal Array.from(writeU64LE(new BufferWriter(), 0).toBuffer()), [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    assert.equal Array.from(writeU64LE(new BufferWriter(), Number.MAX_SAFE_INTEGER).toBuffer()), [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00]
  it 'multiple', => 
    bw := new BufferWriter()
    writeU64LE bw, 0
    writeU64LE bw, Number.MAX_SAFE_INTEGER
    assert.equal Array.from(bw.toBuffer()), [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00]
  it 'throws if too big', =>
    assert.throws () => writeU64LE(new BufferWriter(), Number.MAX_SAFE_INTEGER + 1), Error, 'number too large'

describe 'Write writeU32LE', => 
  it 'valid', => 
    assert.equal Array.from(writeU32LE(new BufferWriter(), 0).toBuffer()), [0x00, 0x00, 0x00, 0x00]
    assert.equal Array.from(writeU32LE(new BufferWriter(), 0x01234567).toBuffer()), [0x67, 0x45, 0x23, 0x01]
    assert.equal Array.from(writeU32LE(new BufferWriter(), 0xffffffff).toBuffer()), [0xff, 0xff, 0xff, 0xff]
  it 'multiple', =>
    bw := new BufferWriter()
    writeU32LE(bw, 0x00000000)
    writeU32LE(bw, 0xffffffff)
    assert.equal Array.from(bw.toBuffer()), [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]
  it 'throws if too big', =>
    assert.throws () => writeU32LE(new BufferWriter(), 0xffffffff + 1), Error, 'number too large'

describe 'Write writePushData', =>
  it 'valid', => 
    testValid := (x: Buf, y: Buf) ->
      actual := Array.from(writePushData(new BufferWriter(), x).toBuffer())
      assert.equal Array.from(actual), y
    testValid [], [0]
    testValid [0], [1, 0]
    testValid [0, 0], [2, 0, 0]
    testValid [1], [1, 1]
    testValid [16], [1, 16]
    testValid new Array(0xFF).fill(0), [76, 255].concat(new Array(0xFF).fill(0))
    testValid new Array(0xFF + 1).fill(0), [77, 0, 1].concat(new Array(0xFF + 1).fill(0))
    testValid new Array(0xFFFF).fill(0), [77, 255, 255].concat(new Array(0xFFFF).fill(0))
    testValid new Array(0xFFFF + 1).fill(0), [78, 0, 0, 1, 0].concat(new Array(0xFFFF + 1).fill(0))
  // it 'throws if data too big', =>
  //   bigBuffer: Buf := []
  //   Object.defineProperty bigBuffer, 'length', () => 0xFFFFFFFF + 1
  //   assert.throws () => writePushData(new BufferWriter(), bigBuffer), Error, 'data too large'