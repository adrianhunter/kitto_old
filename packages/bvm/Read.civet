{ Input } from ./Input.civet
{ Output } from ./Output.civet
{ Tx } from ./Tx.civet
{ encodeHex } from ./Encode.civet
{ BufferReader } from ./BufferReader.civet

export readVarint := (
  reader: BufferReader,
) ->
  { buffer, pos: i } := reader

  reader.checkRemaining(1)
  prefix := buffer[i]

  if prefix <= 0xfc
    reader.pos += 1
    return prefix

  if prefix === 0xfd
    reader.checkRemaining(3)
    reader.pos += 3
    return buffer[i + 2] * 0x0100 + buffer[i + 1]

  if prefix === 0xfe
    reader.checkRemaining(5)
    reader.pos += 5
    return buffer[i + 4] * 0x01000000 + buffer[i + 3] * 0x010000 +
      buffer[i + 2] * 0x0100 + buffer[i + 1]

  // prefix === 0xff

  reader.checkRemaining(9)
  reader.pos += 9

  n := buffer[i + 8] * 0x0100000000000000 +
    buffer[i + 7] * 0x01000000000000 +
    buffer[i + 6] * 0x010000000000 +
    buffer[i + 5] * 0x0100000000 +
    buffer[i + 4] * 0x01000000 +
    buffer[i + 3] * 0x010000 +
    buffer[i + 2] * 0x0100 +
    buffer[i + 1];

  if n > Number.MAX_SAFE_INTEGER
    throw new Error "varint too large"

  return n

export readU64LE := (reader: BufferReader) ->
  reader.checkRemaining 8
  { buffer, pos: i } := reader
  reader.pos += 8
  // We can't use a bit shift for the high-order byte because in JS this math is 32-bit signed.
  n .= buffer[i + 7]
  n = n << 8 | buffer[i + 6]
  n = n << 8 | buffer[i + 5]
  n = n * 256 + buffer[i + 4]
  n = n * 256 + buffer[i + 3]
  n = n * 256 + buffer[i + 2]
  n = n * 256 + buffer[i + 1]
  n = n * 256 + buffer[i + 0]

  n



export readU32LE := (reader: BufferReader) ->
  4 |> reader.checkRemaining
  { buffer, pos: i } := reader
  reader.pos += 4
  // We can't use a bit shift for the high-order byte because in JS this math is 32-bit signed.
  (buffer[i + 3] << 23) * 2 +
    ((buffer[i + 2] << 16) | (buffer[i + 1] << 8) | (buffer[i + 0] << 0))

export function readTx (reader: BufferReader): Tx
  version := reader |> readU32LE
  nin := reader |> readVarint
  inputs: Input[] := []
  for (let vin = 0; vin < nin; vin++) 
    txid := new Uint8Array(reader.read(32)).reverse() |> encodeHex
    vout := reader |> readU32LE
    scriptLength := reader |> readVarint
    script := scriptLength |> reader.read
    sequence := reader |> readU32LE
    inputs.push { txid, vout, script, sequence }

  nout := reader |> readVarint
  outputs: Output[] := []
  for (let vout = 0; vout < nout; vout++) 
    satoshis := reader |> readU64LE
    scriptLength := reader |> readVarint
    script := scriptLength |> reader.read
    outputs.push { satoshis, script }

  locktime := reader |> readU32LE
  {
    version
    inputs
    outputs
    locktime
  } as Tx
export readDER := (reader: BufferReader) ->
  [prefix, length, rprefix, rlength] := 4  |> reader.read
  r := rlength |> reader.read
  [sprefix, slength] := 2 |> reader.read
  s := slength |> reader.read

  // if  prefix is not 0x30 
  //     or rprefix is not 0x02 
  //     or sprefix is not 0x02 
  //     or length is not rlength + slength + 4 
  //     or r[0] & 0x80 
  //     or s[0] & 0x80
    // throw new Error("bad der")

  //@ts-ignore
  r: r[0] === 0 ? r.slice(1) : r
  //@ts-ignore
  s: s[0] === 0 ? s.slice(1) : s 
export readBlockHeader := (reader: BufferReader) ->
  version := reader |> readU32LE
  prevBlock := 32 |> reader.read
  merkleRoot := 32 |> reader.read
  timestamp := reader |> readU32LE
  bits := reader |> readU32LE
  nonce := reader |> readU32LE
  { 
    version
    prevBlock
    merkleRoot
    timestamp
    bits
    nonce 
  }



describe 'Read readVarint', ->
  it 'valid', =>
    assert.equal readVarint(new BufferReader([0])), 0
    assert.equal readVarint(new BufferReader([252])), 252
    assert.equal readVarint(new BufferReader([0xfd, 0x00, 0x00])), 0
    assert.equal readVarint(new BufferReader([0xfd, 0xfd, 0x00])), 253
    assert.equal readVarint(new BufferReader([0xfd, 0xff, 0x00])), 255
    assert.equal readVarint(new BufferReader([0xfd, 0x00, 0x01])), 256
    assert.equal readVarint(new BufferReader([0xfd, 0xfe, 0xff])), 0xfffe
    assert.equal readVarint(new BufferReader([0xfe, 0x00, 0x00, 0x00, 0x00])), 0
    assert.equal readVarint(new BufferReader([0xfe, 0xfc, 0xfd, 0xfe, 0xff])), 0xfffefdfc
    assert.equal readVarint(new BufferReader([0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])), 0
    assert.equal readVarint(new BufferReader([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00])), Number.MAX_SAFE_INTEGER
  it 'multiple times', => 
    reader := new BufferReader([0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00])
    assert.equal readVarint(reader), 0
    assert.equal readVarint(reader), 1
    assert.equal readVarint(reader), Number.MAX_SAFE_INTEGER
    assert.throws () => readVarint(reader), Error, 'not enough data'
  it 'throws if too big', => 
    assert.throws () => readVarint(new BufferReader([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 0x00])), Error, 'varint too large'
    assert.throws () => readVarint(new BufferReader([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff])), Error, 'varint too large'
  it 'throws if not enough data', => 
    err := 'not enough data'
    assert.throws () => readVarint(new BufferReader([])), Error, err
    assert.throws () => readVarint(new BufferReader([0xfd])), Error, err
    assert.throws () => readVarint(new BufferReader([0xfd, 0x00])), Error, err
    assert.throws () => readVarint(new BufferReader([0xfe, 0x00])), Error, err
    assert.throws () => readVarint(new BufferReader([0xfe, 0x00, 0x00, 0x00])), Error, err
    assert.throws () => readVarint(new BufferReader([0xff, 0x00])), Error, err
    assert.throws () => readVarint(new BufferReader([0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])), Error, err
    assert.throws () => readVarint(new BufferReader([0xff, 0x00])), Error, err

describe 'Read readU64LE', => 
  it 'valid', =>
    assert.equal readU64LE(new BufferReader([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])), 0
    assert.equal readU64LE(new BufferReader([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00])), Number.MAX_SAFE_INTEGER
  it 'multiple times', => 
    const reader = new BufferReader([
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00
    ])
    assert.equal readU64LE(reader), 0x0000000000000000
    assert.equal readU64LE(reader), Number.MAX_SAFE_INTEGER
    assert.throws () => readU64LE(reader), Error, 'not enough data'
  it 'throws if not enough data', => 
    assert.throws () => readU64LE(new BufferReader([])), Error, 'not enough data'
    assert.throws () => readU64LE(new BufferReader([0x00])), Error, 'not enough data'
    assert.throws () => readU64LE(new BufferReader([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])), Error, 'not enough data'

describe 'Read readU32LE', ->
  it 'valid', => 
    assert.equal readU32LE(new BufferReader([0x00, 0x00, 0x00, 0x00])), 0x00000000
    assert.equal readU32LE(new BufferReader([0x01, 0x23, 0x45, 0x67])), 0x67452301
    assert.equal readU32LE(new BufferReader([0xff, 0xff, 0xff, 0xff])), 0xffffffff
  it 'multiple times', => 
    const reader = new BufferReader([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff])
    assert.equal readU32LE(reader), 0x00000000
    assert.equal readU32LE(reader), 0xffffffff
    assert.throws () => readU32LE(reader), Error, 'not enough data'
  it 'throws if not enough data', => 
    assert.throws () => readU32LE(new BufferReader([])), Error, 'not enough data'
    assert.throws () => readU32LE(new BufferReader([0x00])), Error, 'not enough data'
    assert.throws () => readU32LE(new BufferReader([0x00, 0x00, 0x00])), Error, 'not enough data'

{decodeHex} from ./Decode.civet

describe 'Read readBlockHeader', =>
  decoder := new TextDecoder
  it 'genesis header', => 
    genesisBlockHeader := '0100000000000000000000000000000000000000000000000000000000000000000000003BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A29AB5F49FFFF001D1DAC2B7C'
    assert.equal decodeHex(genesisBlockHeader).length, 80
    reader := new BufferReader(decodeHex(genesisBlockHeader))
    header := readBlockHeader(reader)
    reader.close()
    assert.equal header.version, 1
    assert.equal encodeHex(header.prevBlock), '0000000000000000000000000000000000000000000000000000000000000000'
    assert.equal encodeHex(header.merkleRoot), '3ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a'
    assert.equal header.timestamp, 1231006505
    assert.equal header.bits, 0x1d00ffff
    assert.equal header.nonce, 2083236893
  it 'genesis block', => 
    genesisBlock
    reader := new BufferReader(decodeHex(genesisBlock))
    readBlockHeader(reader)
    txCount := readVarint(reader)
    assert.equal txCount, 1
    tx := readTx(reader)
    assert.equal tx.version, 1
    inputScriptAscii := decoder.decode new Uint8Array tx.inputs[0].script
    assert.equal inputScriptAscii.includes('The Times 03/Jan/2009 Chancellor on brink of second bailout for banks'), true
    reader.close()
  it 'multiple times', => 
    genesisBlockHeader := '0100000000000000000000000000000000000000000000000000000000000000000000003BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A29AB5F49FFFF001D1DAC2B7C'
    genesisBlockHeader3x := genesisBlockHeader + genesisBlockHeader + genesisBlockHeader
    reader := new BufferReader(decodeHex(genesisBlockHeader3x))
    header1 := readBlockHeader(reader)
    header2 := readBlockHeader(reader)
    header3 := readBlockHeader(reader)
    reader.close()
    assert.equal header1, header2
    assert.equal header2, header3
  it 'throws if not enough data', => 
    genesisBlockHeader := '0100000000000000000000000000000000000000000000000000000000000000000000003BA3EDFD7A7B12B27AC72C3E67768F617FC81BC3888A51323A9FB8AA4B1E5E4A29AB5F49FFFF001D1DAC2B'
    reader := new BufferReader(decodeHex(genesisBlockHeader))
    assert.throws () => readBlockHeader(reader), Error, 'not enough data'