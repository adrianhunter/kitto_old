
export class BufferWriter
  @(
    public buffers: Uint8Array[] = []
    public length: number = 0
  )
  write(buffer: Buf): BufferWriter
    @buffers.push new Uint8Array buffer
    @length += buffer.length
    @
  toBuffer(): Uint8Array
    if @buffers.length is 1
      return @buffers[0]
    whole := new Uint8Array @length
    offset .= 0
    @buffers.forEach (part) -> 
      whole.set part, offset
      offset += part.length
    whole






describe "BufferWriter", ->

  it "empty", ->
    assert.equal new BufferWriter().toBuffer().length, 0
    assert.equal new BufferWriter().buffers.length, 0
    assert.equal new BufferWriter().length, 0
    return
  it "appends and increases length", -> 
    writer := new BufferWriter
    writer.write [0, 1, 2]
    assert.equal writer.length, 3
    writer.write [3]
    assert.equal writer.length, 4
    assert.equal writer.buffers.length, 2
    return
  it "concatenates buffers", -> 
    writer := new BufferWriter()
    writer.write [0, 1, 2, 3]
    writer.write [4]
    writer.write []
    writer.write [5, 6, 7, 8, 9]
    assert.equal Array.from( writer.toBuffer()), [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
    ]
    return

