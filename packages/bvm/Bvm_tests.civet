
{run} from ./Bvm.civet
// {evalScript} from ./bvm
// run := evalScript
{ Tx } from ./Tx.civet
{encodePushData} from ./Encode.civet
{decodeHex, decodeTx} from ./Decode.civet
{ Op } from ./Op

describe "Bvm", ->
  // { it, expect } := import.meta.vitest
//   it 'valid script returns vm including stack trace', async =>
//     vm := await run [Op._2, Op._3], [Op.add, Op._5, Op.equal]
//     // console.log vm
//     // console.log (JSON.stringify vm.stackTrace, null, 4)
//     expect(vm.success).to.be.true
//     expect(vm.error).to.be.null
// //     // assert.isTrue(vm.success)
// //     // assert.isNull(vm.error)
// //     // assert.deepEqual(vm.stack, [[1]])
// //     // assert.lengthOf(vm.stackTrace, 5)
// //     // assert.isTrue(vm.stackTrace.every(l => l.length === 3))



  it 'valid script returns vm omitting stack trace', async => 
    vm := await run [Op._2, Op._3], [Op.add, Op._5, Op.equal], undefined, undefined, undefined, { trace: false }

    assert.equal vm.success, true
    assert.equal vm.error, null

    // assert.isNull(vm.error)
//     // assert.deepEqual(vm.stack, [[1]])
//     expect(vm.stackTrace.length).to.be.equal 0

// //   it('invalid script returns vm with error message', () => {
// //     const vm1 = evalScript([Op._2, Op._3, Op.checkSigVerify], [Op.add, Op._5, Op.equal])
// //     assert.isFalse(vm1.success)
// //     assert.equal(vm1.error.message, 'non-push data in unlock script')

// //     const vm2 = evalScript([Op._2, Op._3], [Op.add, Op._6, Op.equalVerify])
// //     assert.isFalse(vm2.success)
// //     assert.match(vm2.error.message, /Op.equalVerify failed/)
// //   })

// //   it('valid script returns vm asynchronosly', async () => {
// //     await evalScript([Op._2, Op._3], [Op.add, Op._5, Op.equal], undefined, undefined, undefined, { async: true })
// //       .then(vm => assert.isTrue(vm.success))
// //     assert.isTrue(true)
// //   })

// //   it('invalid script returns vm asynchronosly (does not reject)', async () => {
// //     await evalScript([Op._2, Op._3, Op.checkSigVerify], [Op.add, Op._5, Op.equal], undefined, undefined, undefined, { async: true })
// //       .then(vm => assert.isFalse(vm.success))
// //     assert.isTrue(true)
// //   })
  it 'valid script passes', async => 
    pass := async (script: any) ->
      console.log `run: ${JSON.stringify script}`
      vm2 := await run [], script, undefined, undefined, undefined, { async: true }
      // console.log vm2
      assert.equal vm2.success, true, `run: ${JSON.stringify script} stack: ${JSON.stringify(vm2, null, 2)}`
      assert.equal vm2.error, null
    tests := [
      [Op.true]
      [Op._1]
      [Op._2]
      [Op._3]
      [Op._4]
      [Op._5]
      [Op._6]
      [Op._7]
      [Op._8]
      [Op._9]
      [Op._10]
      [Op._11]
      [Op._12]
      [Op._13]
      [Op._14]
      [Op._15]
      [Op._16]
      [1, 1]
      [Op.pushData1, 2, 0, 1]
      [Op.pushData2, 2, 0, 0, 1]
      [Op.pushData4, 2, 0, 0, 0, 0, 1]
      [Op.nop, Op.nop, Op.nop, Op._1]
      [Op._1, Op._1, Op.if, Op.else, Op.endif]
      [Op._1, Op._1, Op._1, Op.if, Op.if, Op.endif, Op.endif]
      [Op._1, Op.if, Op._1, Op.else, Op._0, Op.endif]
      [Op._0, Op.if, Op._0, Op.else, Op._1, Op.endif]
      [Op._1, Op.if, Op._0, Op._1, Op.endif]
      [Op._1, Op.if, Op._0, Op.if, Op.else, Op._1, Op.endif, Op.endif]
      [Op._1, Op.if, Op.OP_PUSHDATA1, 1, 0, Op._1, Op.endif]
      [Op._1, Op.if, Op.else, Op.else, Op._1, Op.endif]
      [Op._1, Op.if, Op.else, Op.else, Op.else, Op.else, Op._1, Op.endif]
      [Op._1, Op.if, Op._1, Op.else, Op._1, Op.if, Op.endif, Op.endif]
      [Op._1, Op.verify, Op._1]
      [Op._1, Op.return]
      [Op.false, Op.true, Op.return]
      [Op._1, Op._0, Op.toAltstack]
      [Op._1, Op.toAltstack, Op.fromAltstack]
      [Op._1, Op.ifDup, Op.drop, Op.drop, Op._1]
      [Op.depth, Op._1]
      [Op._0, Op.depth]
      [Op._1, Op._0, Op.drop]
      [Op._0, Op.dup, Op.drop, Op.drop, Op._1]
      [Op._1, Op._0, Op._0, Op.nip, Op.drop]
      [Op._1, Op._0, Op.over]
      [Op._1, Op._0, Op.pick]
      [Op._1, Op._0, Op._0, Op._0, Op._0, Op._4, Op.pick]
      [2, 0xff, 0xff, Op._1, Op._1, Op.pick, 2, 0xff, 0xff, Op.equal]
      [Op._1, Op._0, Op.roll]
      [Op._1, Op._0, Op._0, Op.roll, Op.drop]
      [Op._1, Op._0, Op._0, Op._0, Op._0, Op._4, Op.roll]
      [Op._1, Op._0, Op._0, Op.rot]
      [Op._0, Op._1, Op._0, Op.rot, Op.rot]
      [Op._0, Op._0, Op._1, Op.rot, Op.rot, Op.rot]
      [Op._1, Op._0, Op.swap]
      [Op._0, Op._1, Op.tuck, Op.drop, Op.drop]
      [Op._1, Op._0, Op._0, Op.drop2]
      // [Op._0, Op._1, Op.drop2]
      // [Op._0, Op._1, Op.drop2, Op.drop, Op.drop]
      // [Op._0, Op._0, Op._1, Op.dup3]
      // [Op._0, Op._0, Op._1, Op.dup3, Op.drop, Op.drop, Op.drop]
      // [Op._0, Op._1, Op._0, Op._0, Op.over2]
      // [Op._0, Op._0, Op._0, Op._1, Op.over2, Op.drop, Op.drop]
      [Op._0, Op._1, Op._0, Op._0, Op._0, Op._0, Op.rot2]
      [Op._0, Op._0, Op._0, Op._1, Op._0, Op._0, Op.rot2, Op.rot2]
      [Op._0, Op._0, Op._0, Op._0, Op._0, Op._1, Op.rot2, Op.rot2, Op.rot2]
      [Op._1, Op._0, Op._0, Op._0, Op._0, Op._0, Op.rot2, Op.drop]
      [Op._0, Op._1, Op._0, Op._0, Op.swap2]
      [Op._1, Op._0, Op._0, Op._0, Op.swap2, Op.drop]
      [Op._0, Op._0, Op.cat, Op._0, Op.equal]
      [Op._0, Op._1, Op.cat, Op._1, Op.equal]
      [Op._1, Op._2, Op.cat, 2, 1, 2, Op.equal]
      [Op._1, Op._0, Op._0, Op._2, Op._0, Op.cat, Op.pick]
      [Op._0, Op._0, Op.cat, Op.if, Op.else, Op._1, Op.endif]
      [Op._0, Op._0, Op.split, Op._0, Op.equalVerify, Op._0, Op.equal]
      [2, Op._0, Op._1, Op._1, Op.split]
      [2, Op._0, Op._1, Op._2, Op.split, Op.drop]
      [2, Op._0, Op._1, Op._0, Op.split]
      [Op._0, Op._0, Op.split, Op._1]
      [Op._1, Op._1, Op.split, Op.drop]
      [3, 0x00, 0x11, 0x22, Op._0, Op.split, 3, 0x00, 0x11, 0x22, Op.equalVerify, Op._0, Op.equal]
      [3, 0x00, 0x11, 0x22, Op._1, Op.split, 2, 0x11, 0x22, Op.equalVerify, 1, 0x00, Op.equal]
      [3, 0x00, 0x11, 0x22, Op._2, Op.split, 1, 0x22, Op.equalVerify, 2, 0x00, 0x11, Op.equal]
      [3, 0x00, 0x11, 0x22, Op._3, Op.split, Op._0, Op.equalVerify, 3, 0x00, 0x11, 0x22, Op.equal]
      [2, Op._0, Op._1, Op.size, Op._2, Op.equalVerify]
      [Op._1, Op.size]
      [Op._1, Op.size, Op.drop]
      [Op._1, Op._1, Op.and]
      [Op._1, Op._1, Op.or]
      [Op._1, Op._1, Op.xor, Op.if, Op.else, Op._1, Op.endif]
      [3, 0xFF, 0x01, 0x00, Op.invert, 3, 0x00, 0xFE, 0xFF, Op.equal]
      [Op._0, Op._0, Op.lshift, Op._0, Op.equal]
      [Op._4, Op._2, Op.lshift, Op._16, Op.equal]
      [2, 0x12, 0x34, Op._4, Op.lshift, 2, 0x23, 0x40, Op.equal]
      [Op._0, Op._0, Op.RSHIFT, Op._0, Op.equal]
      [Op._4, Op._2, Op.RSHIFT, Op._1, Op.equal]
      [2, 0x12, 0x34, Op._4, Op.RSHIFT, 2, 0x01, 0x23, Op.equal]
      [Op._0, Op._0, Op.equal]
      [Op._1, Op._1, Op.equal]
      [Op._1, Op._0, Op._0, Op.equalVerify]
      [Op._0, Op.add1]
      [Op._1, Op.add1, Op._2, Op.equal]
      [Op._2, Op.sub1]
      [Op._0, Op.sub1, Op.negate1, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0x7F, Op.add1, Op.size, Op._5, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0xFF, Op.sub1, Op.size, Op._5, Op.equal]
      [Op._1, Op.negate, Op.negate1, Op.equal]
      [Op.negate1, Op.negate, Op._1, Op.equal]
      [Op._1, Op.abs, Op._1, Op.equal]
      [Op.negate1, Op.abs, Op._1, Op.equal]
      [Op.negate1]
      [Op.negate1, Op.abs]
      [Op._1, Op.not, Op._0, Op.equal]
      [Op._2, Op.not, Op._0, Op.equal]
      [Op._1, Op.not, Op.not]
      [Op._1, Op.notequal0]
      [Op._0, Op.notequal0, Op._0, Op.equal]
      [Op._2, Op.notequal0]
      [5, 0, 0, 0, 0, 0, Op.add1]
      [5, 0, 0, 0, 0, 0, Op.sub1]
      [5, 0, 0, 0, 0, 0, Op.negate, Op._1]
      [5, 0, 0, 0, 0, 0, Op.abs, Op._1]
      [5, 0, 0, 0, 0, 0, Op.not]
      [5, 0, 0, 0, 0, 0, Op.notequal0, Op._1]
      [Op._0, Op._1, Op.add]
      [Op._1, Op._0, Op.add]
      [Op._1, Op._2, Op.add, Op._3, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0xFF, 4, 0xFF, 0xFF, 0xFF, 0xFF, Op.add, Op.size, Op._5, Op.equal]
      [5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, Op.add, Op.size, Op._6, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0xFF, Op.add, Op._0, Op.equal]
      [Op._2, Op._1, Op.sub]
      [Op._1, Op._1, Op.sub, Op._0, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0xFF, 4, 0xFF, 0xFF, 0xFF, 0x7F, Op.sub, Op.size, Op._5, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0x7F, Op.sub, Op._0, Op.equal]
      [Op._1, Op._1, Op.mul, Op._1, Op.equal]
      [Op._2, Op._3, Op.mul, Op._6, Op.equal]
      [4, 0xFF, 0xFF, 0xFF, 0x7F, 4, 0xFF, 0xFF, 0xFF, 0x7F, Op.mul]
      [Op._1, Op.negate1, Op.mul, Op.negate1, Op.equal]
      [Op._1, Op._1, Op.div, Op._1, Op.equal]
      [Op._5, Op._2, Op.div, Op._2, Op.equal]
      [Op._2, Op.negate1, Op.div, 1, 130, Op.equal]
      [Op._1, Op._1, Op.mod, Op._0, Op.equal]
      [Op._5, Op._2, Op.mod, Op._1, Op.equal]
      [Op._5, 1, 0x82, Op.mod, Op._1, Op.equal]
      [1, 0x83, Op._2, Op.mod, Op.negate1, Op.equal]
      [Op._1, Op._1, Op.BOOLAND]
      [Op._0, Op._1, Op.BOOLAND, Op._0, Op.equal]
      [Op._1, Op._0, Op.BOOLOR]
      [Op._0, Op._0, Op.BOOLOR, Op._0, Op.equal]
      [Op._1, Op._1, Op.NUMEQUAL]
      [Op._0, Op._1, Op.NUMEQUAL, Op.not]
      [Op._1, Op._1, Op.NUMEQUALVERIFY, Op._1]
      [Op._1, Op._0, Op.NUMNOTEQUAL]
      [Op._1, Op._1, Op.NUMNOTEQUAL, Op.not]
      [Op._0, Op._1, Op.LESSTHAN]
      [Op._1, Op._2, Op.LESSTHAN]
      [Op.negate1, Op._0, Op.LESSTHAN]
      [Op._0, Op._0, Op.LESSTHAN, Op.not]
      [Op._1, Op._0, Op.GREATERTHAN]
      [Op._0, Op.negate1, Op.GREATERTHAN]
      [Op._2, Op._1, Op.GREATERTHAN]
      [Op._0, Op._0, Op.GREATERTHAN, Op.not]
      [Op._0, Op._1, Op.LESSTHANOREQUAL]
      [Op.negate1, Op._0, Op.LESSTHANOREQUAL]
      [Op._0, Op._0, Op.LESSTHANOREQUAL]
      [Op.negate1, Op.negate1, Op.LESSTHANOREQUAL]
      [Op._1, Op._0, Op.GREATERTHANOREQUAL]
      [Op._0, Op.negate1, Op.GREATERTHANOREQUAL]
      [Op._0, Op._0, Op.GREATERTHANOREQUAL]
      [Op._1, Op._1, Op.GREATERTHANOREQUAL]
      [Op._0, Op._1, Op.min, Op._0, Op.equal]
      [Op._0, Op._0, Op.min, Op._0, Op.equal]
      [Op.negate1, Op._0, Op.min, Op.negate1, Op.equal]
      [Op._0, Op._1, Op.max, Op._1, Op.equal]
      [Op._0, Op._0, Op.max, Op._0, Op.equal]
      [Op.negate1, Op._0, Op.max, Op._0, Op.equal]
      [Op._0, Op._0, Op._1, Op.within]
      [Op._0, Op.negate1, Op._1, Op.within]
      [1, 0, Op.BIN2NUM, Op._0, Op.equal]
      [3, 0, 0, 0, Op.BIN2NUM, Op._0, Op.equal]
      [7, 1, 0, 0, 0, 0, 0, 0, Op.BIN2NUM, Op._1, Op.equal]
      [7, 1, 0, 0, 0, 0, 0, 0x80, Op.BIN2NUM, Op.negate1, Op.equal]
      [1, 0x80, Op.BIN2NUM, Op._0, Op.equal]
      [7, 0, 0, 0, 0, 0, 0, 0x80, Op.BIN2NUM, Op._0, Op.equal]
      [7, 1, 2, 3, 0, 0, 0, 0, Op.BIN2NUM, 3, 1, 2, 3, Op.equal]
      [Op._1, Op._7, Op.NUM2BIN, 7, 1, 0, 0, 0, 0, 0, 0, Op.equal]
      [Op._0, Op._4, Op.NUM2BIN, Op._0, Op.NUMEQUAL]
      [Op._0, Op._4, Op.NUM2BIN, Op._0, Op.equal, Op.not]
      [Op._1, Op._1, Op._16, Op.NUM2BIN, Op.BIN2NUM, Op.equal]
      // [Op.negate1, Op.dup, Op._16, Op.NUM2BIN, Op.BIN2NUM, Op.equal]
      // [Op._1, 5, 129, 0, 0, 0, 0, Op.NUM2BIN]
      // [Op._1, Op.RIPEMD160]
      // [Op._0, Op.RIPEMD160]
    ]

    for await (const t of tests)
      await pass t


    return

    // return
    // [Op.true] |> pass |> await
    // [Op._1] |> pass |> await
    // [Op._2] |> pass |> await
    // [Op._3] |> pass |> await
    // [Op._4] |> pass |> await
    // [Op._5] |> pass |> await
    // [Op._6] |> pass |> await
    // [Op._7] |> pass |> await
    // [Op._8] |> pass |> await
    // [Op._9] |> pass |> await
    // [Op._10] |> pass |> await
    // [Op._11] |> pass |> await
    // [Op._12] |> pass |> await
    // [Op._13] |> pass |> await
    // [Op._14] |> pass |> await
    // [Op._15] |> pass |> await
    // [Op._16] |> pass |> await


    // await pass([Op._0, Op.not])



    // // await pass(Array.from(encodePushData(decodeHex('cea1b21f1a739fba68d1d4290437d2c5609be1d3'))).concat(
    // //   Array.from(encodePushData(decodeHex('0123456789abcdef')))).concat([Op.RIPEMD160, Op.equal]))
    // // await pass([Op._1, Op.sha1])
    // // await pass([Op._0, Op.sha1])
    // // await pass(Array.from(encodePushData(decodeHex('0ca2eadb529ac2e63abf9b4ae3df8ee121f10547'))).concat(
    // //   Array.from(encodePushData(decodeHex('0123456789abcdef')))).concat([Op.sha1, Op.equal]))
    // await pass([Op._1, Op.sha256])
    // await pass([Op._0, Op.sha256])
    // await pass(Array.from(encodePushData(decodeHex('55c53f5d490297900cefa825d0c8e8e9532ee8a118abe7d8570762cd38be9818'))).concat(
    //   Array.from(encodePushData(decodeHex('0123456789abcdef')))).concat([Op.sha256, Op.equal]))
    // await pass([Op._1, Op.hash160])
    // await pass([Op._0, Op.hash160])
    // await pass(Array.from(encodePushData(decodeHex('a956ed79819901b1b2c7b3ec045081f749c588ed'))).concat(
    //   Array.from(encodePushData(decodeHex('0123456789abcdef')))).concat([Op.hash160, Op.equal]))
    // await pass([Op._1, Op.hash256])
    // await pass([Op._0, Op.hash256])
    // await pass(Array.from(encodePushData(decodeHex('137ad663f79da06e282ed0abbec4d70523ced5ff8e39d5c2e5641d978c5925aa'))).concat(
    //   Array.from(encodePushData(decodeHex('0123456789abcdef')))).concat([Op.hash256, Op.equal]))
    // await pass([Op.nop1, Op.nop2, Op.nop3, Op.nop4, Op.nop5,
    //   Op.nop6, Op.nop7, Op.nop8, Op.nop9, Op.nop10, Op._1])
//   })


  it 'bad', async () => 
    fail := async (script: any) ->
      assert.equal (await run([], script, undefined, undefined, undefined)).success, false

    tests := [
      []
      [Op.false]
      [1]
      [3, 0, 1]
      [Op.OP_PUSHDATA1, 0]
      [Op.OP_PUSHDATA1, 1]
      [Op.OP_PUSHDATA1, 10, 0]
      [Op.OP_PUSHDATA2, 20, 0]
      [Op.pushData4, 30, 0]
      [Op.if, Op.endif]
      [Op._1, Op._1, Op.if]
      [Op._1, Op._1, Op.NOTIF]
      [Op._1, Op.else]
      [Op._1, Op.endif]
      [Op._1, Op._1, Op.if, Op.else]
      [Op._1, Op._1, Op.if, Op.if, Op.endif]
      [Op._0, Op.if, Op._1, Op.else, Op._0, Op.endif]
      [Op._0, Op.if, Op.OP_PUSHDATA1, 1, 1, Op._1, Op.endif]
      [Op.verify]
      [Op._0, Op.verify]
      [Op.return]
      [Op.false, Op.return]
      [Op.toAltstack, Op._1]
      [Op.fromAltstack, Op._1]
      [Op._0, Op.toAltstack, Op._1, Op.fromAltstack]
      [Op.ifDup]
      [Op.drop]
      [Op._1, Op.drop, Op.drop]
      [Op.dup]
      [Op.nip]
      [Op._1, Op.nip]
      [Op.over]
      [Op._1, Op.over]
      [Op.pick]
      [Op._0, Op.pick]
      [Op._0, Op._1, Op.pick]
      [Op.roll]
      [Op._0, Op.roll]
      [Op._0, Op._1, Op.roll]
      [Op.rot]
      [Op._1, Op.rot]
      [Op._1, Op._1, Op.rot]
      [Op._0, Op._1, Op._1, Op.rot]
      [Op.swap]
      [Op._1, Op.swap]
      [Op._0, Op._1, Op.swap]
      [Op.tuck]
      [Op._1, Op.tuck]
      [Op._1, Op._0, Op.tuck]
      [Op.drop2]
      [Op._1, Op.drop2]
      [Op._1, Op._1, Op.drop2]
      [Op.drop2]
      [Op._1, Op.drop2]
      [Op._1, Op._0, Op.drop2]
      [Op.dup3]
      [Op._1, Op.dup3]
      [Op._1, Op._1, Op.dup3]
      [Op._1, Op._1, Op._0, Op.dup3]
      [Op.over2]
      [Op._1, Op.over2]
      [Op._1, Op._1, Op.over2]
      [Op._1, Op._1, Op._1, Op.over2]
      [Op._1, Op._0, Op._1, Op._1, Op.over2]
      [Op.rot2]
      [Op._1, Op.rot2]
      [Op._1, Op._1, Op.rot2]
      [Op._1, Op._1, Op._1, Op.rot2]
      [Op._1, Op._1, Op._1, Op._1, Op.rot2]
      [Op._1, Op._1, Op._1, Op._1, Op._1, Op.rot2]
      [Op._1, Op._0, Op._1, Op._1, Op._1, Op._1, Op.rot2]
      [Op.swap2]
      [Op._1, Op.swap2]
      [Op._1, Op._1, Op.swap2]
      [Op._1, Op._1, Op._1, Op.swap2]
      [Op._1, Op._0, Op._1, Op._1, Op.swap2]
      [Op.cat]
      [Op._1, Op.cat]
      [Op._1, Op._0, Op._0, Op.cat]
      [Op.split]
      [Op._1, Op.split]
      [Op._0, Op._1, Op.split]
      [Op._1, Op._2, Op.split]
      [Op._1, Op.negate1, Op.split]
      [Op._0, Op.size]
      [Op.and]
      [Op._0, Op.and]
      [Op._0, Op._1, Op.and]
      [Op.or]
      [Op._0, Op.or]
      [Op._0, Op._1, Op.or]
      [Op.xor]
      [Op._0, Op.xor]
      [Op._0, Op._1, Op.xor]
      [Op.lshift]
      [Op._1, Op.lshift]
      [Op._1, Op.negate1, Op.lshift]
      [Op.RSHIFT]
      [Op._1, Op.RSHIFT]
      [Op._1, Op.negate1, Op.RSHIFT]
      [Op.invert]
      [Op.equal]
      [Op._0, Op.equal]
      [Op._1, Op._0, Op.equal]
      [Op._1, Op._0, Op.equalVerify, Op._1]
      [Op.add1]
      [Op.sub1]
      [Op.negate]
      [Op.abs]
      [Op.not]
      [Op.notequal0]
      [Op.add]
      [Op._1, Op.add]
      [5, 0, 0, 0, 0, 0, Op.add]
      [Op.sub]
      [Op._1, Op.sub]
      [5, 0, 0, 0, 0, 0, Op.sub]
      [Op.mul]
      [Op._1, Op.mul]
      [5, 0, 0, 0, 0, 0, Op.mul]
      [2, 0, 0, 2, 0, 0, Op.mul]
      [Op.div]
      [Op._1, Op.div]
      [5, 0, 0, 0, 0, 0, Op.div]
      [Op._1, Op._0, Op.div]
      [Op.mod]
      [Op._1, Op.mod]
      [5, 0, 0, 0, 0, 0, Op.mod]
      [Op._1, Op._0, Op.mod]
      [Op.BOOLAND]
      [Op._1, Op.BOOLAND]
      [5, 0, 0, 0, 0, 0, Op.BOOLAND]
      [Op.BOOLOR]
      [Op._1, Op.BOOLOR]
      [5, 0, 0, 0, 0, 0, Op.BOOLOR]
      [Op.NUMEQUAL]
      [Op._1, Op.NUMEQUAL]
      [5, 0, 0, 0, 0, 0, Op.NUMEQUAL]
      [Op._0, Op._1, Op.NUMEQUAL]
      [Op.NUMEQUALVERIFY]
      [Op._1, Op.NUMEQUALVERIFY]
      [5, 0, 0, 0, 0, 0, Op.NUMEQUALVERIFY]
      [Op._1, Op._2, Op.NUMEQUALVERIFY]
      [Op.NUMNOTEQUAL]
      [Op._1, Op.NUMNOTEQUAL]
      [5, 0, 0, 0, 0, 0, Op.NUMNOTEQUAL]
      [Op._1, Op._1, Op.NUMNOTEQUAL]
      [Op.LESSTHAN]
      [Op._1, Op.LESSTHAN]
      [5, 0, 0, 0, 0, 0, Op.LESSTHAN]
      [Op._1, Op._0, Op.LESSTHAN]
      [Op._0, Op.negate1, Op.LESSTHAN]
      [Op.GREATERTHAN]
      [Op._1, Op.GREATERTHAN]
      [5, 0, 0, 0, 0, 0, Op.GREATERTHAN]
      [Op._0, Op._1, Op.GREATERTHAN]
      [Op.negate1, Op._0, Op.GREATERTHAN]
      [Op.LESSTHANOREQUAL]
      [Op._1, Op.LESSTHANOREQUAL]
      [5, 0, 0, 0, 0, 0, Op.LESSTHANOREQUAL]
      [Op._1, Op._0, Op.LESSTHANOREQUAL]
      [Op._0, Op.negate1, Op.LESSTHANOREQUAL]
      [Op.GREATERTHANOREQUAL]
      [Op._1, Op.GREATERTHANOREQUAL]
      [5, 0, 0, 0, 0, 0, Op.GREATERTHANOREQUAL]
      [Op._0, Op._1, Op.GREATERTHANOREQUAL]
      [Op.negate1, Op._0, Op.GREATERTHANOREQUAL]
      [Op.min]
      [Op._1, Op.min]
      [5, 0, 0, 0, 0, 0, Op.min]
      [Op.max]
      [Op._1, Op.max]
      [5, 0, 0, 0, 0, 0, Op.max]
      [Op.within]
      [Op._1, Op.within]
      [Op._1, Op._1, Op.within]
      [5, 0, 0, 0, 0, 0, Op.within]
      [Op._0, Op._1, Op._2, Op.within]
      [Op._0, Op.negate1, Op._0, Op.within]
      [Op.BIN2NUM]
      [Op.NUM2BIN]
      [Op._1, Op.NUM2BIN]
      [Op._1, Op._0, Op.NUM2BIN]
      [Op._1, Op.negate1, Op.NUM2BIN]
      [5, 129, 0, 0, 0, 0, Op._1, Op.NUM2BIN]
      [Op.RIPEMD160]
      [Op.sha1]
      [Op.sha256]
      [Op.hash160]
      [Op.hash256]
      [Op.checkSig]
      // [Op._1, Op.checkSig]
      // [Op.checkSigVerify]
      // [Op._1, Op.checkSigVerify]
      // [Op.checkMultiSig]
      // [Op._1, Op.checkMultiSig]
      // [Op._0, Op._0, Op.checkMultiSig]
      // [Op._0, Op._0, Op.negate1, Op.checkMultiSig]
      // [Op._0, Op.negate1, Op._0, Op.checkMultiSig]
      // [Op._0, Op._0, Op._1, Op.checkMultiSig]
      // [Op._0, Op._0, 1, 21, Op.checkMultiSig]
      // [Op._0, Op._9, Op._9, Op._2, Op._9, Op._1, Op.checkMultiSig]
      // [Op.NOP10 + 1]
      [255]

    ]
    for await (const t of tests)
      t |> fail |> await

    return

  // t 'checksig', async () => 
  //   rawtx := '0100000001b207aba3f19358f3a58048d7647cff2ca25a57fe92a1c4324ba47fdde7d7eca4030000006a4730440220316f5707b0a872c67bebc10f15832389c96a6be58e803c992d6b4b3bc5864687022019cf6ab02706865b8507a4f56eeae155ac794a363d95dce8c8777c10f1f9fc01412103093313584be3ccd8777947c1b8f9cc945e9764296451aa29209f9ac56eb4e91affffffff03204e0000000000001976a91461ed573d90e9582689739e72d17624b2d8faa4c388ac204e0000000000001976a914fca1fe054916c043dc36d703a464cb6edce8e72e88ac5b0c6e01000000001976a91400937c46183f418f8eaac2af10db62c5c852ffe888ac00000000'
  //   prevrawtx := '01000000014b71d4aa217e6e515f343c1b5f3e6294fd416e8fa782b089a412c6e32ad0ed07050000006a4730440220449b66c7ec56b6e6f4c133e3cce67cb74e97bbc924deb3f4dbf43e3de941d05e0220649510d81de69df1bbef6b627dab88e20fa272a811613f97503c45715146c929412103a8ff752878232a096647f90350851419daca06a498f382de8b89772930ad4727ffffffff0450c30000000000001976a914902bfe624e2620a4615e7bb6511abd2c2fc7ff7d88ac204e0000000000001976a9149e2f22092ab09053c8be4a662045c069205a511588ac10270000000000001976a914eec1eda286b8fd1a198b6f6ee103bd24d3cdbd5188ac37a96e01000000001976a9149595b9d204ca44fde3b4fb43eff8e8b9d74edd8a88ac00000000'
  //   vin := 0
  //   tx := Tx.fromHex rawtx
  //   prevtx := Tx.fromHex prevrawtx
  //   input := tx.inputs[vin]
  //   vout := input.vout
  //   unlockScript := input.script
  //   prevout := prevtx.outputs[vout]
  //   lockScript := prevout.script
  //   parentSatoshis := prevout.satoshis
  //   vm := await run(unlockScript.code, lockScript, tx, vin, parentSatoshis)

  //   console.log vm
  //   expect(vm.success).to.be.true
    // assert.isTrue(vm.success)
    // const tx2 = decodeTx(decodeHex(rawtx))
    // const vm2 = await evalScript(unlockScript, lockScript, tx2, vin, parentSatoshis, { async: true })
    // assert.isTrue(vm2.success)

//   it('checksigverify', async () => {
//     const pk = nimble.PrivateKey.fromRandom()

//     const lockScriptWriter = new BufferWriter()
//     writePushData(lockScriptWriter, pk.toPublicKey().toBuffer())
//     lockScriptWriter.write([Op.checkSigVerify])
//     lockScriptWriter.write([Op._1])
//     const lockScript = lockScriptWriter.toBuffer()

//     const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

//     const tx2 = new nimble.Transaction().from(tx1.outputs[0])

//     const signature = generateTxSignature(tx2, 0, lockScript, 1000, pk.number, pk.toPublicKey().point)
//     const unlockScript = encodePushData(signature)

//     tx2.inputs[0].script = unlockScript

//     expect(evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: false }).success).to.equal(true)
//     expect((await evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: true })).success).to.equal(true)
//   })

//   it('checkmultisig valid', async () => {
//     const pk1 = nimble.PrivateKey.fromRandom()
//     const pk2 = nimble.PrivateKey.fromRandom()
//     const pk3 = nimble.PrivateKey.fromRandom()

//     const lockScriptWriter = new BufferWriter()
//     lockScriptWriter.write([Op._2])
//     writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
//     lockScriptWriter.write([Op._3])
//     lockScriptWriter.write([Op.checkMultiSig])
//     const lockScript = lockScriptWriter.toBuffer()

//     const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

//     const tx2 = new nimble.Transaction().from(tx1.outputs[0])

//     const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)
//     const signature3 = generateTxSignature(tx2, 0, lockScript, 1000, pk3.number, pk3.toPublicKey().point)

//     const unlockScriptWriter = new BufferWriter()
//     unlockScriptWriter.write([Op._0])
//     writePushData(unlockScriptWriter, signature1)
//     writePushData(unlockScriptWriter, signature3)
//     const unlockScript = unlockScriptWriter.toBuffer()
//     tx2.inputs[0].script = unlockScript

//     expect(evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: false }).success).to.equal(true)
//     expect((await evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: true })).success).to.equal(true)
//   })

//   it('checkmultisig throws if out of order', async () => {
//     const pk1 = nimble.PrivateKey.fromRandom()
//     const pk2 = nimble.PrivateKey.fromRandom()
//     const pk3 = nimble.PrivateKey.fromRandom()

//     const lockScriptWriter = new BufferWriter()
//     lockScriptWriter.write([Op._2])
//     writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
//     lockScriptWriter.write([Op._3])
//     lockScriptWriter.write([Op.checkMultiSig])
//     const lockScript = lockScriptWriter.toBuffer()

//     const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

//     const tx2 = new nimble.Transaction().from(tx1.outputs[0])

//     const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)
//     const signature3 = generateTxSignature(tx2, 0, lockScript, 1000, pk3.number, pk3.toPublicKey().point)

//     const unlockScriptWriter = new BufferWriter()
//     unlockScriptWriter.write([Op._0])
//     writePushData(unlockScriptWriter, signature3)
//     writePushData(unlockScriptWriter, signature1)
//     const unlockScript = unlockScriptWriter.toBuffer()
//     tx2.inputs[0].script = unlockScript

//     expect(evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: false }).success).to.equal(false)
//     expect((await evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: true })).success).to.equal(false)
//   })

//   it('checkmultisigverify throws if repeat signatures', async () => {
//     const pk1 = nimble.PrivateKey.fromRandom()
//     const pk2 = nimble.PrivateKey.fromRandom()
//     const pk3 = nimble.PrivateKey.fromRandom()

//     const lockScriptWriter = new BufferWriter()
//     lockScriptWriter.write([Op._2])
//     writePushData(lockScriptWriter, pk1.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk2.toPublicKey().toBuffer())
//     writePushData(lockScriptWriter, pk3.toPublicKey().toBuffer())
//     lockScriptWriter.write([Op._3])
//     lockScriptWriter.write([Op.checkMultiSigVERIFY])
//     const lockScript = lockScriptWriter.toBuffer()

//     const tx1 = new nimble.Transaction().output({ script: lockScript, satoshis: 1000 })

//     const tx2 = new nimble.Transaction().from(tx1.outputs[0])

//     const signature1 = generateTxSignature(tx2, 0, lockScript, 1000, pk1.number, pk1.toPublicKey().point)

//     const unlockScriptWriter = new BufferWriter()
//     unlockScriptWriter.write([Op._0])
//     writePushData(unlockScriptWriter, signature1)
//     writePushData(unlockScriptWriter, signature1)
//     const unlockScript = unlockScriptWriter.toBuffer()
//     tx2.inputs[0].script = unlockScript

//     expect(evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: false }).success).to.equal(false)
//     expect((await evalScript(unlockScript, lockScript, tx2, 0, 1000, { async: true })).success).to.equal(false)
//   })
  // t 'op_push_tx', async =>
  //   // 6b48a034eebf2dcca5c0c61dbb8407a4d3dc747786563fb7f46bae677a941778
  //   hex := '0100000002cad657c4a178b0a4f9fdc546d1947e3c19cea71a8f888c3c9a96778eda45782203000000fdb4034daf030100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cad657c4a178b0a4f9fdc546d1947e3c19cea71a8f888c3c9a96778eda45782203000000fd100320aaf460daab8997860a390bb3eb641734462c2fd9f86320a6390895a3a94a71c701c35279630142517a75547901687f7501447f77007901207f7504000000007e517951797e56797eaa577901247f75547f77876975756754795579827758947f75557982770128947f77527987696861547921cdb285cc49e5ff3eed6536e7b426e8a528b05bf9276bd05431a671743e651ceb002102dca1e194dd541a47f4c85fea6a4d45bb50f16ed2fddc391bf80b525454f8b40920f941a26b1c1802eaa09109701e4e632e1ef730b0b68c9517e7c19be2ba4c7d37202f282d163597a82d72c263b004695297aecb4d758dccd1dbf61e82a3360bde2c202cde0b36a3821ef6dbd1cc8d754dcbae97526904b063c2722da89735162d282f56795679aa616100790079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a756157795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff0061517951795179517997527a75517a5179009f635179517993527a75517a685179517a75517a7561527a75517a517951795296a0630079527994527a75517a68537982775279827754527993517993013051797e527e53797e57797e527e52797e5579517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7e56797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a756177777777778705000000000000ffffffffaaf460daab8997860a390bb3eb641734462c2fd9f86320a6390895a3a94a71c700000000c30000000000ffffffffcad657c4a178b0a4f9fdc546d1947e3c19cea71a8f888c3c9a96778eda457822040000006a473044022049624f444425d53d9465088fe5239ac0e3f36a68c51ea0faeded2accc5f67464022037f203a2ae519af1deb5bad9a2eaada5878157f589a166188bbe505feb8d5c664121026e5da8a96d09642bec2f378d6e91798b41f140f0353fc468c8b8e52e0ccd81b0ffffffff04d0070000000000001976a914d5db232b2065054f58c6fee1a60298ad621d28dc88ac0000000000000000fdc901006a0372756e0105004dbd017b22696e223a312c22726566223a5b22326534376165323832656135366465306234613161386132623439643330623364663863366636386230656662323036313363343331363761616562306635305f6f31222c22373261363165623939306666646236623338653566393535653139346665643566663662303134663735616336383233353339636535363133616561306265385f6f31225d2c226f7574223a5b2237336432353434666465396338343230316630653766376330373232366464316439343262343665626562633732653662633863323032316633353564646161225d2c2264656c223a5b2261373234623162663762623065643235313431313933326233666333396631653237373262326538306239383931383762653739663930373935326636383032225d2c22637265223a5b223137643952503733467579503565443154756e7a7952777652465a63644431366233225d2c2265786563223a5b7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c2273656e64222c5b223137643952503733467579503565443154756e7a7952777652465a63644431366233222c323030305d5d7d5d7d11010000000000001976a91448a6c21f7b62fb917ee09ee18537a878605921f388acb1b40b00000000001976a914d5db232b2065054f58c6fee1a60298ad621d28dc88ac00000000'

  //   // 227845da8e77969a3c8c888f1aa7ce193c7e94d146c5fdf9a4b078a1c457d6ca
  //   prevhex := '010000000364974feb567ba63fcfaf27e864b487fef7bd53a452c1312a34f78551beb17227020000006a47304402201dc7ba571d4c668303fc67ebcda250291e3dc589f9e9a26da82c39cdb1e7c7390220434fc4273a3028a5a6f6f266d875a7a1a154c90a315949cad46caa2096d2d6bb412102e0163c5d3a7320384bd4b47a9a33f9f52bfc975ae625e16bcced732d89e5d48affffffff64974feb567ba63fcfaf27e864b487fef7bd53a452c1312a34f78551beb17227000000006a47304402203d038ce0fde27bab0d31e596bf8e98a70c0a57714b7e54fba87d65ebea13b358022008d1583a727300383d03d6b5c222563815ef624171062affece7bbd30eab1d1a4121026e5da8a96d09642bec2f378d6e91798b41f140f0353fc468c8b8e52e0ccd81b0ffffffff64974feb567ba63fcfaf27e864b487fef7bd53a452c1312a34f78551beb17227040000006b483045022100bb2e7ee1e6c2ac89520688693cbf70c814c9ebd47e511d1f1248856926e37593022010b7c2af433ff0e3dfb2ded1300939f9c70677529bfd5f1952eb5957c4edbe7a4121026e5da8a96d09642bec2f378d6e91798b41f140f0353fc468c8b8e52e0ccd81b0ffffffff0522020000000000001976a914d5db232b2065054f58c6fee1a60298ad621d28dc88ac0000000000000000fd9003006a0372756e0105004d84037b22696e223a312c22726566223a5b22643631373030323561363232343864386466366463313465333830366536386238646633643830346338303063376266623233623062343233323836323530355f6f31222c22326534376165323832656135366465306234613161386132623439643330623364663863366636386230656662323036313363343331363761616562306635305f6f31222c22373261363165623939306666646236623338653566393535653139346665643566663662303134663735616336383233353339636535363133616561306265385f6f31222c22373237653762343233623765653430633062356265383766626137666135363733656132643230613734323539303430613732393564396333326139303031315f6f31222c22383162636566323962306534656437343566333432326330623736346133336337366430333638616632643265376464313339646238653030656533643861365f6f31222c22343931343536393336373661663735363765626532303637316335636230313336396163373838633230663362316338303466363234613165646131386633665f6f31222c22336237656634313131383562626533643031636165616462653666313135623031303361353436633465663061633734373461613666626237316166663230385f6f31225d2c226f7574223a5b2231613731363232383763653036336562356533333737306431373564313637643539323638633766336563393261643366643066316430346161626565303234222c2265653738633230356636313132353936656439623563336663393766353739313734653863303539633431353731653132636639336535336637366532613030225d2c2264656c223a5b5d2c22637265223a5b7b2224617262223a7b2261646472657373223a22314c566d536e76536561386166445150414251567a6e664470775a7245616e736e7a222c227361746f73686973223a323030307d2c2254223a7b22246a6967223a317d7d5d2c2265786563223a5b7b226f70223a2243414c4c222c2264617461223a5b7b22246a6967223a307d2c2273656e64222c5b7b2224617262223a7b2261646472657373223a22314c566d536e76536561386166445150414251567a6e664470775a7245616e736e7a222c227361746f73686973223a323030307d2c2254223a7b22246a6967223a317d7d2c323030305d5d7d5d7d11010000000000001976a9147d84ef033a83de99f901583153832ac11819c73d88ac8705000000000000fd100320aaf460daab8997860a390bb3eb641734462c2fd9f86320a6390895a3a94a71c701c35279630142517a75547901687f7501447f77007901207f7504000000007e517951797e56797eaa577901247f75547f77876975756754795579827758947f75557982770128947f77527987696861547921cdb285cc49e5ff3eed6536e7b426e8a528b05bf9276bd05431a671743e651ceb002102dca1e194dd541a47f4c85fea6a4d45bb50f16ed2fddc391bf80b525454f8b40920f941a26b1c1802eaa09109701e4e632e1ef730b0b68c9517e7c19be2ba4c7d37202f282d163597a82d72c263b004695297aecb4d758dccd1dbf61e82a3360bde2c202cde0b36a3821ef6dbd1cc8d754dcbae97526904b063c2722da89735162d282f56795679aa616100790079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a756157795679567956795679537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff0061517951795179517997527a75517a5179009f635179517993527a75517a685179517a75517a7561527a75517a517951795296a0630079527994527a75517a68537982775279827754527993517993013051797e527e53797e57797e527e52797e5579517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7e56797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561777777777787ba0b00000000001976a914d5db232b2065054f58c6fee1a60298ad621d28dc88ac00000000'

  //   tx := hex |> Tx.fromString
  //   prevtx := prevhex |> Tx.fromString

  //   vin := 0
  //   vout := tx.inputs[vin].vout
  //   prevout := prevtx.outputs[vout]

    // expect(run(tx.inputs[vin].script, prevout.script, tx, vin, prevout.satoshis).success).to.equal(true)
    //@ts-ignore
    // expect((await run(tx.inputs[vin].script, prevout.script, tx, vin, prevout.satoshis)).success).to.equal(true)

//   it('acceps unlock with pushdata script', async () => {
//     const unlock = [Op._1, Op._2]
//     const lock = [Op.add, Op._3, Op.equal]
//     expect(evalScript(unlock, lock, undefined, undefined, undefined, { async: false }).success).to.equal(true)
//     expect((await evalScript(unlock, lock, undefined, undefined, undefined, { async: true })).success).to.equal(true)
//   })

//   it('rejects unlock with non-pushdata script', async () => {
//     const unlock = [Op._1, Op._2, Op.add]
//     const lock = [Op._3, Op.equal]
//     expect(evalScript(unlock, lock, undefined, undefined, undefined, { async: false }).success).to.equal(false)
//     expect((await evalScript(unlock, lock, undefined, undefined, undefined, { async: true })).success).to.equal(false)
//   })
// })

// describe('evalScript stackTrace', () => {
//   it('correctly traces stack through if/else branches', () => {
//     const vm = evalScript([Op._1], [Op.if, Op._1, Op._1, Op.else, Op._2, Op._2, Op.endif, Op.add])
//     assert.equal(vm.chunks.length, vm.stackTrace.length)
//     assert.deepEqual(vm.stack, [[2]])
//   })

//   it('correctly traces stack through negative if/else branches', () => {
//     const vm = evalScript([Op._0], [Op.if, Op._1, Op._1, Op.else, Op._2, Op._2, Op.endif, Op.add])
//     assert.equal(vm.chunks.length, vm.stackTrace.length)
//     assert.deepEqual(vm.stack, [[4]])
//   })

//   it('correctly traces stack through nested if/else branches', () => {
//     const vm = evalScript([Op._1], [Op.if, Op._1, Op._1, Op.if, Op._2, Op.else, Op._3, Op.endif, Op.else, Op._2, Op._2, Op.endif, Op.add])
//     assert.equal(vm.chunks.length, vm.stackTrace.length)
//     assert.deepEqual(vm.stack, [[3]])
//   })

//   it('does not trace after Op.return', () => {
//     const vm = evalScript([Op._1], [Op._2, Op.return, Op._10, { buf: [1, 2, 3, 4] }])
//     assert.equal(vm.chunks.length, 5)
//     assert.equal(vm.stackTrace.length, 3)
//     assert.deepEqual(vm.stack, [[1], [2]])
//   })

//   it('does not trace after eval error', () => {
//     const vm = evalScript([Op._1], [Op.false, Op.verify, Op._10, { buf: [1, 2, 3, 4] }])
//     assert.equal(vm.chunks.length, 5)
//     assert.equal(vm.stackTrace.length, 3)
//     assert.deepEqual(vm.stack, [[1]])
//   })

//   it('does not trace after setup error', () => {
//     const vm = evalScript([{ buf: [1, 2, 3, 4] }, Op.BIN2NUM], [Op._1, Op.false, Op.verify, Op._10])
//     assert.equal(vm.chunks.length, 0)
//     assert.equal(vm.stackTrace.length, 0)
//     assert.deepEqual(vm.stack, [])
//   })